#!/bin/bash


#COLORS
CDEF=" \033[0m"                                     # default color
CCIN=" \033[0;36m"                                  # info color
CGSC=" \033[0;32m"                                  # success color
CRER=" \033[0;31m"                                  # error color
CWAR=" \033[0;33m"                                  # waring color
b_CDEF=" \033[1;37m"                                # bold default color
b_CCIN=" \033[1;36m"                                # bold info color
b_CGSC=" \033[1;32m"                                # bold success color
b_CRER=" \033[1;31m"                                # bold error color
b_CWAR=" \033[1;33m"                                # bold warning color

# echo like ...  with  flag type  and display message  colors
prompt () {
    case ${1} in
        "-s"|"--success")
        echo -e "${b_CGSC}${@/-s/}${CDEF}";;          # print success message
        "-e"|"--error")
        echo -e "${b_CRER}${@/-e/}${CDEF}";;          # print error message
        "-w"|"--warning")
        echo -e "${b_CWAR}${@/-w/}${CDEF}";;          # print warning message
        "-i"|"--info")
        echo -e "${b_CCIN}${@/-i/}${CDEF}";;          # print info message
        *)
            echo -e "$@"
        ;;
    esac
}

#creating text file in sorted
sortf() {
    read -p "Do you want to sort the file?(By default a-z)(Y/n): " op
    if [ $op == 'Y' -o $op == 'y' ]; then
        PS3='Enter your choice(1-6): '
        sort=("Oldest to newest" "Newest to oldest" "A-Z" "Z-A" "Largest to smallest" "Smallest to largest")
        select SORT_OPTION in "${sort[@]}"; do
            case $SORT_OPTION in
                "Oldest to newest")
                    ls *$FILE_TYPE -1tr  > ${WRK_DIR}/filelist.txt
                    prompt -i "File order"
                    prompt -i $(ls *$FILE_TYPE -tr)
                    break
                ;;
                "Newest to oldest")
                    ls *$FILE_TYPE -1tr > ${WRK_DIR}/filelist.txt
                    prompt -i "File order"
                    prompt -i $(ls *$FILE_TYPE -t)
                    break
                ;;
                "A-Z")
                    ls *$FILE_TYPE -1 > ${WRK_DIR}/filelist.txt
                    prompt -i "File order"
                    prompt -i $(ls *$FILE_TYPE)
                    break
                ;;
                "Z-A")
                    ls *$FILE_TYPE -1r  > ${WRK_DIR}/filelist.txt
                    prompt -i "File order"
                    prompt -i $(ls *$FILE_TYPE -r)
                    break
                ;;
                "Largest to smallest")
                    ls *$FILE_TYPE -1S > ${WRK_DIR}/filelist.txt
                    prompt -i "File order"
                    prompt -i $(ls *$FILE_TYPE -S)
                    break
                ;;
                "Smallest to largest")
                    ls *$FILE_TYPE -1Sr  > ${WRK_DIR}/filelist.txt
                    prompt -i "File order"
                    prompt -i $(ls *$FILE_TYPE -Sr)
                    break
                ;;
                *) echo "invalid option $REPLY";;
            esac
        done
    else
        ls *$FILE_TYPE -1 > ${WRK_DIR}/filelist.txt 2>/dev/null
        prompt -i "File order"
        prompt -i $(ls *$FILE_TYPE 2>/dev/null)
    fi
}

makedir(){
    [[ -d "${HOME}/all_in_one/${PROJECT_NAME}" ]] || mkdir -p "${HOME}/all_in_one/${PROJECT_NAME}"
    OUT_DIR="${HOME}/all_in_one/${PROJECT_NAME}"
}

read -p "Enter your project name: "  PROJECT_NAME
prompt -i "\nChecking for the existence of program's working directory..."
prompt -i "All processing happens in \".all_in_one\" folder and output saved in \"all_in_one\" folder in your home directory\n"
[[ -d "${HOME}/.all_in_one/${PROJECT_NAME}" ]] ||mkdir -p "${HOME}/.all_in_one/${PROJECT_NAME}"
WRK_DIR="${HOME}/.all_in_one/${PROJECT_NAME}"



PS3='Enter your choice(1-6): '
types=("Image to pdf" "Compress pdf" "Pdf to image" "Merge pdfs" "Split pdf" "Append image to pdf" "Quick convert")
select TYPE in "${types[@]}"; do
    case $TYPE in
        "Image to pdf")
            flag=0
            while [ $flag -eq 0 ]; do
                read -p "Enter the folder path of images(relative path from your home folder e.g Photos/screenshots): " DIR
                if [ -d "${HOME}/${DIR}" ]; then
                    DIR="${HOME}/${DIR}"
                    cd "${DIR}"
                    # echo "Directory $DIR exists."
                    flag=1
                else
                    prompt -e "[ Error! ] -> Directory ${HOME}/${DIR} does not exists.\n"
                fi
            done
            
            #option to specify file type
            read -p "Do you want to specify image type(Y/n): " op
            if [ $op == 'Y' -o $op == 'y' ]; then
                PS3='Enter your choice(1-5): '
                sort=("png" "jpg" "jpeg" "tiff" "webp" )
                select SORT_OPTION in "${sort[@]}"; do
                    case $SORT_OPTION in
                        "png")
                            FILE_TYPE=".png"
                            break
                        ;;
                        "jpg")
                            FILE_TYPE=".jpg"
                            break
                        ;;
                        "jpeg")
                            FILE_TYPE=".jpeg"
                            break
                        ;;
                        "tiff")
                            FILE_TYPE=".tiff"
                            break
                        ;;
                        "webp")
                            FILE_TYPE=".webp"
                            break
                        ;;
                        *) echo "invalid option $REPLY";;
                    esac
                done
            else
                FILE_TYPE=".png *.jpg *.jpeg *.tiff *.webp"
            fi
            
            #sort options
            sortf
            
            
            mkdir ${WRK_DIR}/intermediate
            # while read -r line; do
            #    cp "$DIR/$line" "${WRK_DIR}/intermediate/$line"
            #done < ${WRK_DIR}/filelist.txt
            #fixed width
            while read -r line; do
                width=$(identify -format '%w' "$line")
                height=$(identify -format '%h' "$line")
                
                identifier=0
                
                read -p "Do you want to specify image height resolution(Y/n): " op
                if [ $op == 'Y' -o $op == 'y' ]; then
                    while true ; do
                        read -p "Enter height: " height
                        if [ height -gt 0] ; then
                            break
                        fi
                    done
                    identifier=1
                fi
                
                read -p "Do you want to specify image width resolution(Y/n): " op
                if [ $op == 'Y' -o $op == 'y' ]; then
                    while true ; do
                        read -p "Enter width: " width
                        if [ width -gt 0] ; then
                            break
                        fi
                    done
                    
                    if [ identifier -eq 1 ] ; then
                        identifier=2
                    else
                        identifier=3
                    fi
                fi
                
                if [ identifier -eq 0 ] ; then
                    
                fi
                height=$((height*1080/width))
                height=$(echo $height | awk '{print int($1)}')
                new_name=$(echo "$line" | sed 's/ //g')
                convert "$line" -resize 1080x$height -background white -alpha remove -alpha off "${WRK_DIR}/intermediate/$new_name"
                
                prompt -s "successfully changed the resoulution(to fixed width) of $line"
            done < ${WRK_DIR}/filelist.txt
            
            [[ -d "${HOME}/all_in_one/${PROJECT_NAME}" ]] || mkdir -p "${HOME}/all_in_one/${PROJECT_NAME}"
            OUT_DIR="${HOME}/all_in_one/${PROJECT_NAME}"
            
            #reading output file name
            read -p "Enter the output file name(without extension): " OUTPUT
            
            cd "$WRK_DIR/intermediate"
            prompt -i "\nConverting to pdf\n"
            
            #converting images to pdf using img2pdf
            if [[ -d "$WRK_DIR/intermediate" ]] ; then
                ls -tr | tr '\n' ' '  | sed 's/$/\ --output\ my.pdf/' | xargs img2pdf
            fi
            
            #moving output to output folder
            mv my.pdf "${OUT_DIR}/${OUTPUT}.pdf"
            
            #deleting the files in intermediate
            if [[ -d "$WRK_DIR/intermediate" ]] ; then
                rm *
            fi
            
            #success prompt
            prompt -s "Successfully converted to pdf!!!"
            sleep 2
            
            #opening converted pdf
            xdg-open "${OUT_DIR}/${OUTPUT}.pdf"
            break
        ;;
        "Compress pdf")
            flag=0
            while [ $flag -eq 0 ]; do
                read -p "Enter the folder path of pdfs(relative path from your home folder e.g Photos/screenshots): " DIR
                if [ -d "${HOME}/${DIR}" ]; then
                    DIR=${HOME}/${DIR}
                    cd "${DIR}"
                    #echo "Directory $DIR exists."
                    flag=1
                else
                    prompt -e "[ Error! ] -> Directory ${HOME}/${DIR} does not exists.\n"
                fi
            done
            FILE_TYPE=".pdf"
            ls *$FILE_TYPE -1 > ${WRK_DIR}/filelist.txt
            prompt -i "Pdfs going to be compressed"
            prompt -i $(ls *$FILE_TYPE -1)
            
            
            #option to select how much compression
            PS3='Enter your choice(1-3): '
            com_type=("Has a lower quality and smaller size. (72 dpi)" "Has a better quality, but has a slightly larger size (150 dpi)" "Output is of a higher size and quality (300 dpi)")
            select COMPRESSION in "${com_type[@]}"; do
                case $COMPRESSION in
                    "Has a lower quality and smaller size. (72 dpi)")
                        COM_TYPE="screen"
                        break
                    ;;
                    "Has a better quality, but has a slightly larger size (150 dpi)")
                        COM_TYPE="ebook"
                        break
                    ;;
                    "Output is of a higher size and quality (300 dpi)")
                        COM_TYPE="printer"
                        break
                    ;;
                    *) echo "invalid option $REPLY" ;;
                esac
            done
            
            #creating output directory
            [[ -d "${HOME}/all_in_one/${PROJECT_NAME}" ]] || mkdir -p "${HOME}/all_in_one/${PROJECT_NAME}"
            OUT_DIR="${HOME}/all_in_one/${PROJECT_NAME}"
            cd $OUT_DIR
            
            #compressing pdf using ghost script tool
            if [[ -d "$OUT_DIR" ]] ; then
                while read -r line;
                do
                    #echo gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/$COM_TYPE -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$line" "$DIR/$line"
                    gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/$COM_TYPE -dNOPAUSE -dQUIET -dBATCH -sOutputFile="$line" "$DIR/$line" &
                    prompt -i "Compression started for $line....\n"
                done < ${WRK_DIR}/filelist.txt
            fi
            
            #waiting for child process to complete
            wait
            
            #success prompt and opening the output folder
            prompt -s "Successfully compressed"
            sleep 1
            xdg-open $OUT_DIR
            break
        ;;
        "Pdf to image")
            echo "IN PROGRESS"
            break
        ;;
        "Merge pdfs")
            echo "IN PROGRESS"
            break
        ;;
        "Split pdf")
            echo "IN PROGRESS"
            break
        ;;
        "Append image to pdf")
            echo "IN PROGRESS"
            break
        ;;
        "Quick convert" )
            echo "IN PROGRESS"
            break
        ;;
        *) echo "invalid option $REPLY" ;;
    esac
done